# https://git-scm.com/docs/git-config

# general config

[user]
  name = Alexandru Bereghici
  email = abereghici@users.noreply.github.com

[github]
  user = abereghici

[init]
  defaultBranch = main

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[rerere]
  # Remember how you resolved a merge conflict and automatically reapply if it sees it again
  enabled = true

[transfer]
  # Avoid data corruption
  fsckobjects = true

[core]
  excludesFile = ~/.gitignore
  # Make `git rebase` safer on macOS
  # More info: https://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
  trustctime = false

[help]
  # Correct typos
  autoCorrect = 1

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
[url "git@github.com:abereghici/"]
  insteadOf = "git://github.com/abereghici/"

# When accidentally cloning the HTTP version of a repository instead of the SSH version
[url "git@github.com:"]
	insteadOf = "https://github.com/"

# command-specific

[commit]
  # Include the diff of the changes at the bottom of the commit message template
  verbose = true
  # Custom template for new commit messages
  template = ~/.gitmessage

[log]
  # Show branch names with git log
  decorate = short
  # Display dates as '2023-05-25 13:54:51' instead of 'Thu May 25 13:54:51 2023'
  date = iso

[branch]
  # Show most recently changed branches first
  sort = -committerdate

[fetch]
  # Automatically prune deleted branches and tags from your local copy
  # when you fetch (or pull)
  prune = true
  pruneTags = true

[pull]
  # Rebase branches on top of the fetched branch, instead of merging
  # the default branch from the default remote
  rebase = true

[push]
  # When pushing code, always push only your current branch to a branch
  # of the same name on the receiving end
  # http://stackoverflow.com/a/23918418/89484
  default = current
  # Automatically set up upstream tracking
  # when no upstream tracking exists for the current branch
  autoSetupRemote = true
  # Make `git push` automatically push relevant annotated tags when pushing branches out
  followTags = true
  # Make `push --force-with-lease` even safer by ensuring the tip of the remote
  # was actually pulled into your local branch at some point
  useForceIfIncludes = true

[rebase]
  # Automatically include the `--autosquash` option when doing a `git rebase --interactive`
  autoSquash = true

# aliases

[alias]
  #
  # Shortcuts
  #

  # Open .gitconfig in default editor
  ecf          = config --global -e

  a            = add
  aa           = add --all

  c            = commit
  # Commit by adding all unstaged changes
  ca           = commit -a
  cm           = commit -m
  cam          = commit -am
  cne          = commit --no-edit
  empty        = commit --allow-empty -m
  amend        = commit --amend --no-edit

  co           = checkout
  cob          = checkout -b
  # Jump back to to your last branch
  prev         = checkout -
  # Discard all unstaged changes in the working tree and revert them to their state in the HEAD commit
  discard      = checkout .

  br           = branch
  bra          = branch -a

  s            = status
  ss           = status -sb

  # Put all uncommitted changes in a temporary storage
  st           = stash
  # Retrieve the last stored changes again
  stp          = stash pop

  d            = diff
  cp           = cherry-pick
  fp           = fetch --prune --all
  f            = reflog

  pu           = push
  puf          = push --force-with-lease
  put          = push --tags
  # Pull in remote changes for the current repository and all its submodules
  p            = pull --recurse-submodules

  # Rebase: skip a rebase step
  skip         = rebase --skip
  # Rebase: abort
  abort        = rebase --abort
  # Rebase: add changes and continue
  cont         = !git add . && git rebase --continue

  # Compact and readable log
  l            = log --graph --pretty=format:'%C(magenta)%h%Creset%C(auto)%d%Creset %s %C(blue bold)— %cr ~ %an%Creset'
  # Log with list of changed files per each commit
  ls           = log --stat --abbrev-commit

  #
  # First-aid
  #

  # Undo a `git push`
  undopush     = push -f origin HEAD^:master
  # Unstage all staged changes but leave them in the working tree (mixed reset)
  unstage      = reset HEAD
  # Undo last commit but don't throw away the changes (affects HEAD only)
  undo         = reset --soft HEAD~1
  # Remove last commit (from HEAD, Index and Working Dir)
  reset        = reset --hard HEAD~1

  #
  # Helpers
  #

  # Show the user email for the current repository
  whoami       = config user.email

  # List available aliases
  aliases      = config --get-regexp 'alias.*'

  # Display the current branch name
  branchname   = rev-parse --abbrev-ref HEAD

  # Copy the current branch name to the clipboard
  cpbranchname = !git branchname | tr -d '\n' | tr -d ' ' | pbcopy

  # Display the date of the last commit of the active Git branch
  lastcommit   = !git log --pretty=format:'%ar' | head -n 1

  # List contributors with a number of their commits
  contribs     = shortlog -sn

  # List of my own commits across all branches
  my           = !git log --all --no-merges --pretty=format:'%C(reset)%C(bold)%cd %C(reset)%C(white)%s  %C(reset)%h' --date=short --author=\"$(git config user.name)\"

  # How many lines of code I have written today
  today        = diff --shortstat \"@{0 day ago}\"

  # count number of lines of code in the files of a git project
  stats        = "!git ls-files | xargs wc -l"

  # List of branches ordered by last change
  branches     = for-each-ref --sort=-committerdate refs/heads/ --format='%(color:bold)%(refname:short)%(color:reset)\t%(committerdate:relative)'

  # List of files with merge conflicts
  wtf          = diff --name-only --diff-filter=U

  # Cancel local commits in the branch: git fuck master
  fuck         = "!f() { git reset --hard origin/$1; }; f"

  # Delete all untracked files and folders
  cfd          = clean -fd

  # Delete all changes, including untracked files and folders
  nuke         = !git reset --hard && git clean -fd

  # Sharable diff with disabled syntax highlighting and +/- marks
  patch        = !git --no-pager diff --no-color

  # Merge fresh master into the current branch
  mmmr         = !git fetch origin master && git merge origin/master --no-edit
  # Merge fresh main into the current branch
  mmmn         = !git fetch origin main && git merge origin/main --no-edit

  # Push up the branch and set upstream for the current branch
  publish      = "!git push --set-upstream origin $(git branch-name)"
  sha          = log -n 1 --pretty=format:'%H'

# git-delta

[add.interactive]
  useBuiltin = false

[merge]
  conflictStyle = zdiff3

[diff]
  # Clearer diff output
  algorithm = histogram
  # Use different colors to highlight lines in diffs that have been “moved”
  colorMoved = default
  # Ignore indentation changes
  colorMovedWS = allow-indentation-change

# include local/private config if relevant

[delta]
  navigate = true # Use n and N to move between diff sections
  side-by-side = true # Enables the side-by-side view
  true-color = always
  tabs = 2
  hyperlinks = true

[include]
  path = ~/.gitconfig.local
